/*
 * inband_telemetry_report.h
 *
 *  Created on: Jan 19, 2022
 *      Author: nhnghia
 *
 *  This is to parse the INT reports generated by INT sink nodes.
 *  These reports differ from the INT reports that are generated by
 *    source/transit nodes and embedded in network packets.
 *  Althougth the reports generated by the sink nodes to send to INT collectors
 *    must contain also
 *    the INT reports that were generated by source/transit nodes.
 *  Consequently the data structures in this file depend strictly on
 *    the implementation of the INT sink node.
 *  We are testing the P4-based INT:
 *    P4.org Applications Working Group, B. Networks, and Xilinx, “Telemetry Report Format Specification V1.0,” 2018.
 *  An implementation in P4 is available here:
 *    https://github.com/GEANT-DataPlaneProgramming/int-platforms/blob/aa0b7be45ae97b2a1f1d5fea2938f9c75aefc9d7/p4src/int_v1.0/include/int_report.p4
 *    https://github.com/GEANT-DataPlaneProgramming/int-platforms/blob/master/p4src/int_v1.0/include/headers.p4#L144
 */

#ifndef SRC_MMT_TCPIP_LIB_PROTOCOLS_INBAND_TELEMETRY_REPORT_H_
#define SRC_MMT_TCPIP_LIB_PROTOCOLS_INBAND_TELEMETRY_REPORT_H_

#include "plugin_defs.h"
#include "mmt_core.h"
#include "inband_telemetry.h"

/**
 * Inband-telemetry report version 1.0
 * Section 3.2
 * [1] P4.org Applications Working Group, B. Networks, and Xilinx, “Telemetry Report Format Specification V1.0,” 2018.


0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Ver |Length |NProt| RepMdBits   | Reserved  |D|Q|F| hw_id     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                       Switch id                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                       Sequence Number                         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                       Ingress Timestamp                       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                       Variable Optional Metadata              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 */
typedef struct int_report_v10_struct {
#ifdef __BIG_ENDIAN_BITFIELD
	uint8_t
	version:4,
	len    :4;

	uint8_t
	next_proto  :3, //Next Protocol
	report_metadata_bits :6, //Report Metadata Bits: Bitmap that indicates which optional metadata is present in the telemetry report header.
	reserved :6,
	d        :1; //Drop:

	uint8_t
	q    :1, //Congested Queue Association
	f    :1, //Tracked Flow Association
	hw_id:6; //Identifies the hardware subsystem within the network device that generated this report

#else
	uint8_t
	len    :4,
	version:4;

	uint8_t
	d        :1,
	reserved :6,
	report_metadata_bits :6,
	next_proto :3;

	uint8_t
	hw_id:6,
	f    :1,
	q    :1;
#endif

	uint32_t switch_id; //unique ID of a switch (generally administratively assigned)
	uint32_t seq_number; //sequence of reports from a specific combination of (Switch id, hw_id) to a particular telemetry report destination
	uint32_t ingress_timestamp; //local time when the packet was first received on the ingress physical or logical port, in nanoseconds
} __attribute__((packed))
int_report_v10_t;



typedef struct int_info_struct{
	// flow info
	uint32_t src_ip;
	uint32_t dst_ip;
	uint16_t src_port;
	uint16_t dst_port;
	uint16_t ip_proto; //TCP ou UDP?

	// u64 pkt_cnt;
	// u64 byte_cnt;

	uint32_t switch_id; //ID of the switch (sink node) that generates this report
	uint32_t seq_number;
	uint32_t hw_id;
	uint32_t hop_latency; //total time of hop_latencies
	uint32_t sink_time; //the moment this report was created by a sink node
	uint8_t  report_metadata_bits; //Report Metadata Bits
	uint8_t  num_int_hop;

	//for each INT node
	mmt_u32_array_t sw_ids;
	mmt_u32_array_t in_port_ids;
	mmt_u32_array_t e_port_ids;
	mmt_u32_array_t hop_latencies;
	mmt_u32_array_t queue_ids;
	mmt_u32_array_t queue_occups;
	mmt_u32_array_t ingr_times;
	mmt_u32_array_t egr_times;
	mmt_u32_array_t lv2_in_e_port_ids;
	mmt_u32_array_t tx_utilizes;

	//details of report_metadata_bits
	uint8_t is_in_egress_port_id;
	uint8_t is_hop_latency;
	uint8_t is_queue_id_occup;
	uint8_t is_egress_time;
	uint8_t is_queue_id_drop_reason_padding;
	uint8_t is_tx_utilize;

}int_info_t;

#define PROTO_INT_REPORT_ALIAS "int_report"
enum int_report_attributes {
	INT_REPORT_SWITCH_ID = 1,
	INT_REPORT_HW_ID,
	INT_REPORT_SEQ_NUMBER,
	//IP/port's info src/dst
	INT_REPORT_FLOW_IP_SRC,
	INT_REPORT_FLOW_IP_DST,
	INT_REPORT_FLOW_PORT_SRC,
	INT_REPORT_FLOW_PORT_DST,

	INT_REPORT_HOP_LATENCY, //total latency of all hops (= sum_of(INT_REPORT_HOP_LATENCIES))
	INT_REPORT_SINK_TIME
};


#define INT_REPORT_SWITCH_ID_ALIAS     "switch_id"
#define INT_REPORT_HW_ID_ALIAS         "hw_id"
#define INT_REPORT_SEQ_NUMBER_ALIAS    "seq_num"

#define INT_REPORT_FLOW_IP_SRC_ALIAS   "ip_src"
#define INT_REPORT_FLOW_IP_DST_ALIAS   "ip_dst"
#define INT_REPORT_FLOW_PORT_SRC_ALIAS "port_src"
#define INT_REPORT_FLOW_PORT_DST_ALIAS "port_dst"


#define INT_REPORT_HOP_LATENCY_ALIAS        "hop_latency"
#define INT_REPORT_SINK_TIME_ALIAS          "sink_time"

#endif /* SRC_MMT_TCPIP_LIB_PROTOCOLS_INBAND_TELEMETRY_REPORT_H_ */
